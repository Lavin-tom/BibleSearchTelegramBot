import telebot
import random
import xml.etree.ElementTree as ET
from telebot import types

TOKEN = open('api-key.txt').readline()
bot = telebot.TeleBot(TOKEN)
print("Bot is online")

root = None  # Declare root as a global variable initially

hey_msg = ['Hi','Hello','Hey']
knownUsers = []
userStep = {}

book_id_to_search = []
chapter_to_search = []
language = 'english' #default language

hideBoard = types.ReplyKeyboardRemove()  # hide the keyboard

language_select = types.ReplyKeyboardMarkup(one_time_keyboard=True)
language_select.add('English','‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç')

testament_select = types.ReplyKeyboardMarkup(one_time_keyboard=True)
testament_select.add('‡¥™‡¥¥‡¥Ø_‡¥®‡¥ø‡¥Ø‡¥Æ‡¥Ç','‡¥™‡µÅ‡¥§‡¥ø‡¥Ø_‡¥®‡¥ø‡¥Ø‡¥Æ‡¥Ç')

themes_select = types.ReplyKeyboardMarkup(one_time_keyboard=True)
themes_select.add('Anger','Anxiety','Healing','Faith','Thanksgiving','Protection','Patience')

def language_change_fun(new_language):
    global root,language
    # First, clear the existing keyboard options
    testament_select.keyboard.clear()

    if new_language == '‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç':
        language = '‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç'
        testament_select.add('‡¥™‡¥¥‡¥Ø_‡¥®‡¥ø‡¥Ø‡¥Æ‡¥Ç', '‡¥™‡µÅ‡¥§‡¥ø‡¥Ø_‡¥®‡¥ø‡¥Ø‡¥Æ‡¥Ç')
        # Load the XML file for ‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç
        xml_file_path = 'res/bible_mal.xml'
    elif new_language == 'english':
        language = 'english'
        testament_select.add('Old_Testament', 'New_Testament')
        # Load the XML file for English
        xml_file_path = 'res/bible_eng.xml'

    # Parse the XML file
    tree = ET.parse(xml_file_path)
    root = tree.getroot()

New_testement_select = types.ReplyKeyboardMarkup(one_time_keyboard=True)
New_testement_select.add('‡¥Æ‡¥§‡µç‡¥§‡¥æ‡¥Ø‡¥ø','‡¥Æ‡µº‡¥ï‡µç‡¥ï‡µä‡¥∏‡µç','‡¥≤‡µÇ‡¥ï‡µç‡¥ï‡µã‡¥∏‡µç','‡¥Ø‡µã‡¥π‡¥®‡µç‡¥®‡¥æ‡µª','‡¥™‡µç‡¥∞‡¥µ‡µÉ‡¥§‡µç‡¥§‡¥ø‡¥ï‡µæ','‡¥±‡µã‡¥Æ‡µº','1_‡¥ï‡µä‡¥∞‡¥ø‡¥®‡µç‡¥§‡µç‡¥Ø‡µº','2_‡¥ï‡µä‡¥∞‡¥ø‡¥®‡µç‡¥§‡µç‡¥Ø‡µº','‡¥ó‡¥≤‡¥æ‡¥§‡µç‡¥Ø‡µº','‡¥é‡¥´‡µÜ‡¥∏‡µç‡¥Ø‡µº','‡¥´‡¥ø‡¥≤‡¥ø‡¥™‡µç‡¥™‡¥ø‡¥Ø‡µº','‡¥ï‡µä‡¥≤‡µä‡¥∏‡µç‡¥∏‡µç‡¥Ø‡µº',
'1_‡¥§‡µÜ‡¥∏‡µç‡¥∏‡¥≤‡µä‡¥®‡µÄ‡¥ï‡µç‡¥Ø‡µº','2_‡¥§‡µÜ‡¥∏‡µç‡¥∏‡¥≤‡µä‡¥®‡µÄ‡¥ï‡µç‡¥Ø‡µº','1_‡¥§‡¥ø‡¥Æ‡µä‡¥•‡µÜ‡¥Ø‡µä‡¥∏‡µç','2_‡¥§‡¥ø‡¥Æ‡µä‡¥•‡µÜ‡¥Ø‡µä‡¥∏‡µç','‡¥§‡µÄ‡¥§‡µç‡¥§‡µä‡¥∏‡µç','‡¥´‡¥ø‡¥≤‡µá‡¥Æ‡µã‡µª','‡¥é‡¥¨‡µç‡¥∞‡¥æ‡¥Ø‡µº','‡¥Ø‡¥æ‡¥ï‡µç‡¥ï‡µã‡¥¨‡µç','1_‡¥™‡¥§‡µç‡¥∞‡µä‡¥∏‡µç','2_‡¥™‡¥§‡µç‡¥∞‡µä‡¥∏‡µç','1_‡¥Ø‡µã‡¥π‡¥®‡µç‡¥®‡¥æ‡µª','2_‡¥Ø‡µã‡¥π‡¥®‡µç‡¥®‡¥æ‡µª','3_‡¥Ø‡µã‡¥π‡¥®‡µç‡¥®‡¥æ‡µª','‡¥Ø‡µÇ‡¥¶‡¥æ','‡¥µ‡µÜ‡¥≥‡¥ø‡¥™‡µç‡¥™‡¥æ‡¥ü‡µç')

Old_testement_select = types.ReplyKeyboardMarkup(one_time_keyboard=True)
Old_testement_select.add('‡¥â‡¥≤‡µç‡¥™‡¥§‡µç‡¥§‡¥ø','‡¥™‡µÅ‡¥±‡¥™‡µç‡¥™‡¥æ‡¥ü‡µç','‡¥≤‡µá‡¥µ‡µç‡¥Ø‡¥™‡µÅ‡¥∏‡µç‡¥§‡¥ï‡¥Ç','‡¥∏‡¥Ç‡¥ñ‡µç‡¥Ø‡¥æ‡¥™‡µÅ‡¥∏‡µç‡¥§‡¥ï‡¥Ç','‡¥Ü‡¥µ‡µº‡¥§‡µç‡¥§‡¥®‡¥Ç','‡¥Ø‡µã‡¥∂‡µÅ‡¥µ','‡¥®‡µç‡¥Ø‡¥æ‡¥Ø‡¥æ‡¥ß‡¥ø‡¥™‡¥®‡µç‡¥Æ‡¥æ‡µº','‡¥∞‡µÇ‡¥§‡µç‡¥§‡µç',
'1_‡¥∂‡¥Æ‡µÇ‡¥µ‡µá‡µΩ','2_‡¥∂‡¥Æ‡µÇ‡¥µ‡µá‡µΩ','1_‡¥∞‡¥æ‡¥ú‡¥æ‡¥ï‡µç‡¥ï‡¥®‡µç‡¥Æ‡¥æ‡µº','2_‡¥∞‡¥æ‡¥ú‡¥æ‡¥ï‡µç‡¥ï‡¥®‡µç‡¥Æ‡¥æ‡µº','1_‡¥¶‡¥ø‡¥®‡¥µ‡µÉ‡¥§‡µç‡¥§‡¥æ‡¥®‡µç‡¥§‡¥Ç','2_‡¥¶‡¥ø‡¥®‡¥µ‡µÉ‡¥§‡µç‡¥§‡¥æ‡¥®‡µç‡¥§‡¥Ç','‡¥é‡¥∏‡µç‡¥∞‡¥æ','‡¥®‡µÜ‡¥π‡µÜ‡¥Æ‡µç‡¥Ø‡¥æ‡¥µ‡µÅ','‡¥é‡¥∏‡µç‡¥•‡µá‡µº','‡¥á‡¥Ø‡µç‡¥Ø‡µã‡¥¨‡µç','‡¥∏‡¥ô‡µç‡¥ï‡µÄ‡µº‡¥§‡µç‡¥§‡¥®‡¥ô‡µç‡¥ô‡µæ','‡¥∏‡¥¶‡µÉ‡¥∂‡µç‡¥Ø‡¥µ‡¥æ‡¥ï‡µç‡¥Ø‡¥ô‡µç‡¥ô‡µæ',
'‡¥∏‡¥≠‡¥æ‡¥™‡µç‡¥∞‡¥∏‡¥Ç‡¥ó‡¥ø','‡¥â‡¥§‡µç‡¥§‡¥Æ‡¥ó‡µÄ‡¥§‡¥Ç','‡¥Ø‡µÜ‡¥∂‡¥Ø‡µç‡¥Ø‡¥æ','‡¥Ø‡¥ø‡¥∞‡¥Æ‡µç‡¥Ø‡¥æ‡¥µ‡µÅ','‡¥µ‡¥ø‡¥≤‡¥æ‡¥™‡¥ô‡µç‡¥ô‡µæ','‡¥Ø‡µÜ‡¥π‡µá‡¥∏‡µç‡¥ï‡µá‡µΩ','‡¥¶‡¥æ‡¥®‡µÄ‡¥Ø‡µá‡µΩ','‡¥π‡µã‡¥∂‡µá‡¥Ø','‡¥Ø‡µã‡¥µ‡µá‡µΩ','‡¥Ü‡¥Æ‡µã‡¥∏‡µç','‡¥ì‡¥¨‡¥¶‡µç‡¥Ø‡¥æ‡¥µ‡µÅ','‡¥Ø‡µã‡¥®‡¥æ','‡¥Æ‡µÄ‡¥ñ‡¥æ','‡¥®‡¥π‡µÇ‡¥Ç','‡¥π‡¥¨‡¥ï‡µç‡¥ï‡µÇ‡¥ï‡µç‡¥ï‡µç',
'‡¥∏‡µÜ‡¥´‡¥®‡µç‡¥Ø‡¥æ‡¥µ‡µÅ','‡¥π‡¥ó‡µç‡¥ó‡¥æ‡¥Ø‡¥ø','‡¥∏‡µÜ‡¥ñ‡¥∞‡µç‡¥Ø‡¥æ‡¥µ‡µÅ','‡¥Æ‡¥≤‡¥æ‡¥ñ‡¥ø')

New_testement_english_select = types.ReplyKeyboardMarkup(one_time_keyboard=True)
New_testement_english_select.add('Matthew','Mark','Luke','John','Acts','Romans','1_Corinthians','2_Corinthians','Galatians','Ephesians','Philippians','Colossians',
'1_Thessalonians','2_Thessalonians','1_Timothy','2_Timothy','Titus','Philemon','Hebrews','James','1_Peter','2_Peter','1_John','2_John','3_John','Jude','Revelation')

Old_testement_english_select = types.ReplyKeyboardMarkup(one_time_keyboard=True)
Old_testement_english_select.add('Genesis','Exodus','Leviticus','Numbers','Deuteronomy','Joshua','Judges','Ruth',
'1_Samuel','2_Samuel','1_Kings','2_Kings','1_Chronicles','2_Chronicles','Ezra','Nehemiah','Esther','Job','Psalms','Proverbs',
'Ecclesiastes','Song_of_Solomon','Isaiah','Jeremiah','Lamentations','Ezekiel','Daniel','Hosea','Joel','Amos','Obadiah','Jonah','Micah','Nahum','Habakkuk',
'Zephaniah','Haggai','Zechariah','Malachi')

chapter_select = types.ReplyKeyboardMarkup(one_time_keyboard=True)

commands = {'search': 'Search Bible',
            'change_language': 'Change language',
            'all':'List all commands',
            'select_theme': 'Select a quotes for a theme',
            'about':'About me'}

def get_user_step(uid):
    if uid in userStep:
        return userStep[uid]
    else:
        knownUsers.append(uid)
        userStep[uid] = 0
        print("New user detected")
        return 0

def find_chapter(book_id_to_search):
    text = ' '
    chapter_count = 0
    verse_count = 0

    # Find the book element with the specified book ID
    Book = root.find(f"./Book[@id='{book_id_to_search}']")

    if Book is not None:
        chapters = Book.findall('Chapter')
        chapter_count = len(chapters)
        for chapter in chapters:
            verses = chapter.findall('Verse')
            verse_count += len(verses)
    text += str(chapter_count)
    text += ' '
    text += str(verse_count)
    for i in range(1, chapter_count + 1):
        chapter_select.add(str(i))

def search_result(book_id_to_search, chapter, m):
    print(book_id_to_search, chapter)
    cid = m.chat.id
    userStep[cid] = 0
    text = ' '
    text += book_id_to_search
    text += ' '
    text += chapter
    text += '\n\n'
    Book = root.find(f"./Book[@id='{book_id_to_search}']")

    if Book is not None:
        Chapter = Book.find(f"./Chapter[@id='{chapter}']")
        if Chapter is not None:
            for Verse in Chapter.findall('Verse'):
                verse_id = Verse.get('id')
                verse_text = Verse.text

                # Check if the total message length exceeds Telegram's limit
                if len(text + verse_id + '.' + verse_text + '\n\n') > 4000:
                    bot.send_message(m.chat.id, text)
                    text = ' '

                text += verse_id
                text += '.'
                text += verse_text
                text += '\n\n'
            if text:
                bot.send_message(m.chat.id, text)
                bot.send_message(m.chat.id, "/search")
        else:
            print("Chapter not found.")
    else:
        print("Book not found.")


#---------------------main commands-----------------
#show all available commands
@bot.message_handler(commands=['all'])
def command_all(m):
    text = "All available commands :\n"
    for key in commands:
        text += "üî∏ /" + key + " : "
        text += commands[key] + "\n\n"
    bot.send_message(m.chat.id,text)

#show about
@bot.message_handler(commands=['about'])
def handle_about(m):
    cid = m.chat.id
    bot.send_chat_action(m.chat.id,'typing')
    bot.send_message(cid,"WordOfTruth is a Telegram bot that provide Bible quotes as per the user inputs")
    bot.send_message(cid,"Its an open source project, you can find the /source by click here")
    link = "https://t.me/love_in_tom"
    formatted_message = f"If you have any suggestions or feedback feel free to contact me [love_in_tom]({link})"
    bot.reply_to(m, formatted_message, parse_mode='Markdown')

#show source
@bot.message_handler(commands=['source'])
def handle_source(m):
        bot.send_chat_action(m.chat.id,'typing')
        link = "https://github.com/Lavin-tom/Telegram_Bot"
        formatted_message = f"[Click here]({link}) to visit the GitHub repository, You can raise pull request and Issue there."
        bot.reply_to(m, formatted_message, parse_mode='Markdown')

#show start
@bot.message_handler(commands=['start'])
def command_start(m):
	cid = m.chat.id
	if cid not in knownUsers:
		knownUsers.append(cid)
		userStep[cid] = 'start'

#search bible
@bot.message_handler(commands=['change_language'])
def command_change_language(m):
    cid = m.chat.id
    if language == 'english':
	    bot.send_message(cid, "Now English and ‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç versions of Bible is available, Choose any one!",reply_markup=language_select)
    elif language == '‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç':
        bot.send_message(cid, "‡¥≠‡¥æ‡¥∑ ‡¥§‡¥ø‡¥∞‡¥û‡µç‡¥û‡µÜ‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡µÅ‡¥ï, \n‡¥á‡¥™‡µç‡¥™‡µã‡µæ ‡¥á‡¥Ç‡¥ó‡µç‡¥≤‡µÄ‡¥∑‡µç, ‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç ‡¥≠‡¥æ‡¥∑‡¥ï‡¥≥‡¥ø‡µΩ ‡¥¨‡µà‡¥¨‡¥ø‡µæ ‡¥≤‡¥≠‡µç‡¥Ø‡¥Æ‡¥æ‡¥£‡µç",reply_markup=language_select)
    userStep[cid] = 'change_language'

#search bible
@bot.message_handler(commands=['search'])
def command_search(m):
    cid = m.chat.id
    if language == 'english':
        bot.send_message(cid, "what do you want Old-Testament or New-Testament ?",reply_markup=testament_select)
    elif language == '‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç':
        bot.send_message(cid, " ‡¥é‡¥®‡µç‡¥§‡¥æ‡¥£‡µç ‡¥µ‡µá‡¥£‡µç‡¥ü‡¥§‡µç ‡¥™‡¥¥‡¥Ø‡¥®‡¥ø‡¥Ø‡¥Æ‡¥Ç, ‡¥™‡µÅ‡¥§‡¥ø‡¥Ø‡¥®‡¥ø‡¥Ø‡¥Æ‡¥Ç ‡¥§‡¥ø‡¥∞‡¥û‡µç‡¥û‡µÜ‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡µÅ‡¥ï !",reply_markup=testament_select)
    userStep[cid] = 'search'

#select theme
@bot.message_handler(commands=['select_theme'])
def command_search(m):
    cid = m.chat.id
    if language == 'english':
        bot.send_message(cid, "Select any theme?",reply_markup=themes_select)
    elif language == '‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç':
        bot.send_message(cid, "Now english only support for theme",reply_markup=themes_select)
    userStep[cid] = 'select_theme'

#--------------------------------------Bible Search-------------------------------#
@bot.message_handler(func=lambda message: get_user_step(message.chat.id) == 'start')
def msg_start_select(m):
    cid = m.chat.id
    userStep[cid] = 0
    bot.send_chat_action(cid, 'typing')
    bot.send_message(cid,"Welcome to the Bible Search Telegram Bot! This Telegram bot is designed to help users search for Bible verses in both English and Malayalam languages")
    bot.send_message(cid,'click here /search')

@bot.message_handler(func=lambda message: get_user_step(message.chat.id) == 'search')
def msg_search_select(m):
    cid = m.chat.id
    userStep[cid] = 0
    bot.send_chat_action(cid, 'typing')
    userQuery = m.text.lower()
    if userQuery == '‡¥™‡¥¥‡¥Ø_‡¥®‡¥ø‡¥Ø‡¥Æ‡¥Ç':
        bot.send_message(cid, "‡¥™‡µÅ‡¥∏‡µç‚Äå‡¥§‡¥ï‡¥Ç ‡¥§‡¥ø‡¥∞‡¥û‡µç‡¥û‡µÜ‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡µÅ‡¥ï !!",reply_markup=Old_testement_select)
        userStep[cid] = 'select_chapter'

    elif userQuery == '‡¥™‡µÅ‡¥§‡¥ø‡¥Ø_‡¥®‡¥ø‡¥Ø‡¥Æ‡¥Ç':
        bot.send_message(cid, "‡¥™‡µÅ‡¥∏‡µç‚Äå‡¥§‡¥ï‡¥Ç ‡¥§‡¥ø‡¥∞‡¥û‡µç‡¥û‡µÜ‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡µÅ‡¥ï !!",reply_markup=New_testement_select)
        userStep[cid] = 'select_chapter'

    elif userQuery == 'old_testament':
        bot.send_message(cid, "Choose any book?",reply_markup=Old_testement_english_select)
        userStep[cid] = 'select_chapter'

    elif userQuery == 'new_testament':
        bot.send_message(cid, "Choose any book?",reply_markup=New_testement_english_select)
        userStep[cid] = 'select_chapter'
    else:
        bot.send_message(cid,"Invalid Commmands")

#[chapter selection]
@bot.message_handler(func=lambda message: get_user_step(message.chat.id) == 'select_chapter')
def handle_select_chapter(m):
    cid = m.chat.id
    userStep[cid] = 0

    find_chapter(m.text)        #to find no of chapters
    book_id_to_search.clear()
    book_id_to_search.append(m.text)
    try:
        bot.send_message(m.chat.id, "Select chapter",reply_markup=chapter_select)
        userStep[cid] = 'searching'
    except Exception as e:
        bot.send_message(m.chat.id, "Search error!! error while selecting chapter")

#[verses selection]
@bot.message_handler(func=lambda message: get_user_step(message.chat.id) == 'searching')
def handle_user_old_test_search(m):
    cid = m.chat.id
    userStep[cid] = 0
    try:
        chapter_to_search.clear()
        chapter_to_search.append(m.text)
        search_result(book_id_to_search[0],chapter_to_search[0],m)
        print(book_id_to_search[0],chapter_to_search[0])
        chapter_select.keyboard.clear()
        userStep[cid] = 'search_bible'
    except Exception as e:
        bot.send_message(m.chat.id, "Search error!! error while selecting verses")

@bot.message_handler(func=lambda message: get_user_step(message.chat.id) == 'select_theme')
def msg_search_select(m):
    cid = m.chat.id
    userStep[cid] = 0
    bot.send_chat_action(cid, 'typing')
    userQuery = m.text.lower()

    # Parse the XML file
    tree = ET.parse('res/bible_theme.xml')
    root = tree.getroot()

    book = userQuery

    # Find the book element
    book_element = root.find(f"./Book[@id='{book}']")

    if book_element is not None:
        # Get all chapters within the book
        chapters = book_element.findall('Chapter')

        if chapters:
            # Choose a random chapter
            random_chapter = random.choice(chapters)

            # Get the ID and text of the random chapter
            chapter_id = random_chapter.get('id')
            chapter_text = random_chapter.text

            # Send the random verse to the user
            bot.send_message(m.chat.id, f"{chapter_text}")
            bot.send_message(m.chat.id,'/select_theme')
        else:
            bot.send_message(m.chat.id, "No chapters found in the selected book.")
    else:
        bot.send_message(m.chat.id, "Book not found.")

#language change
@bot.message_handler(func=lambda message: get_user_step(message.chat.id) == 'change_language')
def msg_search_select(m):
    cid = m.chat.id
    userStep[cid] = 0
    bot.send_chat_action(cid, 'typing')
    userQuery = m.text.lower()
    if userQuery == '‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç':
        language = '‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç'
        language_change_fun(userQuery)
        bot.send_message(m.chat.id, "‡¥≠‡¥æ‡¥∑ ‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥§‡µç‡¥§‡¥ø‡¥≤‡µá‡¥ï‡µç‡¥ï‡µç ‡¥Æ‡¥æ‡¥±‡¥ø‡¥Ø‡¥ø‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ. \n‡¥§‡¥ø‡¥∞‡¥Ø‡µÅ‡¥µ‡¥æ‡µª ‡¥ï‡µç‡¥≤‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï   /search")
    elif userQuery == 'english':
        language = 'english'
        language_change_fun(userQuery)
        bot.send_message(m.chat.id, "Language changed to English now. \nfor search click here /search")


bot.infinity_polling()
